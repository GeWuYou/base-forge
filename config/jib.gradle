def configureJib(JibProject jibProject) {
    // üü¢ ËØªÂèñÁéØÂ¢ÉÂèòÈáèÔºåÈªòËÆ§Áî®Êú¨Âú∞
    def registry = System.getenv("IMAGE_REGISTRY") ?: "localhost:5000"
    def registryPassword = System.getenv("PRIVATE_DOCKER_REGISTRY_PASSWORD")
    println(jibProject)
    jib {
        from {
            image = "docker://eclipse-temurin:21-jdk"
        }
        to {
            image = "${registry}/${jibProject.imageName}:${jibProject.version}"
            allowInsecureRegistries = true
            auth {
                username = "root"
                password = registryPassword
            }
        }
        // to {
        //     image = "${jibProject.imageName}:${jibProject.version}"
        //     allowInsecureRegistries = true
        //     auth {
        //         username = "gewuyou"
        //         password = System.getenv("DOCKER_HUB_TOKEN")
        //     }
        // }
        container {
            // ËøêË°åÁ´ØÂè£
            ports = jibProject.port
            // ËøêË°åÁéØÂ¢ÉÂèòÈáè
            environment = jibProject.environment
            if (jibProject.entrypoint.size() > 0) {
                entrypoint = jibProject.entrypoint
            }
        }
        extraDirectories {
            // Â§çÂà∂ËÑöÊú¨Âà∞ÂÆπÂô®
            paths = "../scripts"
            // ËÆæÁΩÆÊñá‰ª∂ÊùÉÈôê
            permissions = project.provider { jibProject.permissions }
        }
    }
}

List.of(
        new JibProject("base-forge-config", ["8888"], ["SPRING_PROFILES_ACTIVE": "native"]),
        new JibProject("base-forge-discovery", ["8761"], ["SPRING_PROFILES_ACTIVE": "prod"],
                [
                        "/bin/sh", "-c",
                        "apt-get update && apt-get install -y netcat-openbsd && " +
                                "/entrypoint.sh -d base-forge-config:8888 -c " +
                                "'java -cp \$( cat /app/jib-classpath-file ) \$( cat /app/jib-main-class-file )'"
                ]),
).stream()
        .filter { (project.name == it.projectName) }
        .forEach {
            configureJib(it)
        }
/**
 * This class represents a Jib project.
 */
class JibProject {
    String projectName
    List<String> port
    Map<String, String> environment
    Map<String, String> permissions
    String imageName
    String version
    List<String> entrypoint

    JibProject(String projectName,
               List<String> port = ["8080"],
               Map<String, String> environment = ["SPRING_PROFILES_ACTIVE": "prod"],
               List<String> entrypoint = [],
               String imageName = projectName,
               String version = "latest",
               Map<String, String> permissions = ["/entrypoint.sh": "755"]
    ) {
        this.port = port
        this.environment = environment
        this.entrypoint = entrypoint
        this.projectName = projectName
        this.imageName = imageName
        this.version = version
        this.permissions = permissions
    }

    @Override
    String toString() {
        return "JibProject{" +
                "projectName='" + projectName + '\'' +
                ", port=" + port +
                ", environment=" + environment +
                ", permissions=" + permissions +
                ", imageName='" + imageName + '\'' +
                ", version='" + version + '\'' +
                ", entrypoint=" + entrypoint +
                '}'
    }
}